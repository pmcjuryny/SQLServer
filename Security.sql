BEGIN /*Needs to be documented*/
SELECT state_desc
,permission_name
,schema_name(o.schema_id) AS 'SCHEMA'
,o.name
,USER_NAME(grantee_principal_id)
  FROM [KOR_CRP].[sys].[database_permissions] dp
  join sys.objects o on dp.major_id=o.object_id
    where major_id>=0
END

	
BEGIN /* Needs to be documented */	
--select * from sys.database_role_members
--select * from sys.database_principals

--stage role name, role_id, type, role_id, and member principal_id in temp table

select p.name,p.principal_id,p.type_desc,rm.role_principal_id,rm.member_principal_id  into #usapxm20_temp
from sys.database_principals p
join sys.database_role_members rm on rm.role_principal_id=p.principal_id

--join data back to sys.database_principals to get member name from member_principal_id
select u.name,p.name from #usapxm20_temp u
join sys.database_principals p
on p.principal_id=u.member_principal_id
order by u.name

drop table #usapxm20_temp
END



BEGIN /* Needs to be documented */
SELECT permission_name,sc.name,o.name,prin.name
       FROM sys.database_permissions perm
	   join sys.objects o on o.object_id=perm.major_id
	   join sys.database_principals prin on prin.principal_id=perm.grantee_principal_id
	   join sys.schemas sc on o.schema_id=sc.schema_id
  where grantee_principal_id <>0 and prin.name not like '%_ROLE'
  order by permission_name
END


BEGIN /*Script to create sql statements to recreate existing logins/roles*/
--Script to generate scripts to create logins and users from the servers
--Created by Patrick McJury
--Generate scripts to create logins, and database users
--Includes server and database level role grants
--Includes server and database level permissions on individual objects


--Temp table created to store the commands generated by steps below
create table #temp_usapxm20 (command varchar(3000))

--Generate create login script for sql logins, windows users, and windows groups
--Store CREATE LOGIN script in #temp_usapxm20 table
insert into #temp_usapxm20
select 
	case 
		when type='U' then 'USE MASTER CREATE LOGIN ['+name+'] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]'
		when type='G' then 'USE MASTER CREATE LOGIN ['+name+'] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]'
		when type='S' then 'USE MASTER CREATE LOGIN ['+name+'] WITH PASSWORD=N''<PASSWORD>'', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=ON'
	end
from sys.server_principals 
where principal_id >=200
and type<>'R'

--Generate add server role commands from all users that are part of server level roles
--Store EXEC SP_ADDSRVROLEMEMBER commands in #temp_usapxm20 table
insert into #temp_usapxm20
select 'USE Master EXEC sp_addsrvrolemember '''+l.name+''','''+r.name''''
FROM sys.server_role_members AS RM
  JOIN sys.server_principals AS L
    ON RM.member_principal_id = L.principal_id
  JOIN sys.server_principals AS R
    ON RM.role_principal_id = R.principal_id


--Declare @command variable to use later in SP_MSforeachdb
DECLARE @command varchar(3000)

--Define @command variable for use with SP_MSforeachDB
--query1 get database level permissions
--query2 get all object permissions excluding grants to roles
--query3 generate sp_addrolemember commands
select @command=' USE ? select * from (
SELECT '' USE ? CREATE USER [''+d.[name] COLLATE DATABASE_DEFAULT+''] FOR LOGIN [''+s.[name] COLLATE DATABASE_DEFAULT+''];'' as "Command"
FROM sys.database_principals d
 JOIN sys.server_principals s
 ON d.sid = s.sid
WHERE d.[name] COLLATE DATABASE_DEFAULT <> s.[name] COLLATE DATABASE_DEFAULT
and d.[name] <>''dbo''
union all
select ''USE ? GRANT ''+permission_name+'' to [''+USER_NAME(GRANTEE_PRINCIPAL_ID)+'']'' as "Command"
from sys.database_permissions
where grantee_principal_id not in (select principal_id from sys.database_principals where type=''R'')
	and class_desc=''DATABASE''
union all
--All Object level Grants excluding grants to roles
select ''USE ? GRANT ''+permission_name+'' on ''+OBJECT_SCHEMA_NAME(major_id)+''.''+OBJECT_NAME(major_id)+'' to [''+USER_NAME(grantee_principal_id)+'']'' as "Command"
from sys.database_permissions
where grantee_principal_id not in (select principal_id from sys.database_principals where type=''R'')
	and class_desc<>''DATABASE''
union all
--add members to roles
select ''USE ? exec sp_addrolemember ''''''+user_name(role_principal_id)+'''''', ''''''+user_name(member_principal_id)+'''''''' as "Command"
from sys.database_role_members 
) as t'

--Execute sp_MSforeachdb command and insert results into #temp_usapxm20
insert into #temp_usapxm20
exec sp_MSforeachdb @command

-- Create scripts to replace existing user account with a new account
-- Select all commands from #temp_usapxm20
-- filter with like variables to extract the commands needed for required users
select REPLACE(REPLACE(command,'PRAXAIR-SGP\INDEGXS1','LINDE\f2at37'),'INDEGXS1','f2at37') from #temp_usapxm20 t
where t.Command like '%INDEGXS1%' 
union all
select REPLACE(REPLACE(command,'PRAXAIR-SGP\INDEVSB1','LINDE\e8sw68'),'INDEVSB1','e8sw68') from #temp_usapxm20 t
where t.command like '%INDEVSB1%' 
union all
select REPLACE(REPLACE(command,'PRAXAIR-SGP\INDESTK1','LINDE\c1kx96'),'INDESTK1','c1kx96') from #temp_usapxm20 t
where t.command like '%INDESTK1%'

-- Select all commands from #temp_usapxm20
-- filter with like variables to extract the commands needed for required users
-- select all commands for a specific user.
select * from #temp_usapxm20 T
where t.command like '%USER_NAME%'

--Once commands needed have been extracted, drop the temp tables
drop table #temp_usapxm20


END


BEGIN /* Find orphaned users */
create table #temp_usapxm20_2 (instance_name varchar(50),database_name varchar(30),username varchar(100))

DECLARE @command varchar(3000)

select @command='use ? select @@servername,DB_NAME(),name from sys.database_principals
where type=''S'' and sid not in (select sid from sys.syslogins) and principal_id>4'

insert into #temp_usapxm20_2
exec sp_MSforeachdb @command

select * from #temp_usapxm20_2

drop table #temp_usapxm20_2
END


BEGIN /* Needs to be documented */
SELECT permission_name,sc.name,o.name,prin.name
       FROM sys.database_permissions perm
	   join sys.objects o on o.object_id=perm.major_id
	   join sys.database_principals prin on prin.principal_id=perm.grantee_principal_id
	   join sys.schemas sc on o.schema_id=sc.schema_id
  where grantee_principal_id <>0 and prin.name not like '%_ROLE'
  order by permission_name
END


BEGIN /* List database permissions */
DECLARE @command2 varchar(1000) 
select @command2 = 'USE ? Select  
    [DB Name] = DB_NAME(),  
    [UserName] = CASE princ.[type] 
                    WHEN ''S'' THEN princ.[name]
                    WHEN ''U'' THEN ulogin.[name] COLLATE Latin1_General_CI_AI
                 END,
    [UserType] = CASE princ.[type]
                    WHEN ''S'' THEN ''SQL User''
                    WHEN ''U'' THEN ''Windows User''
                 END,  
    [DatabaseUserName] = princ.[name],       
    [Role] = null,      
    [PermissionType] = perm.[permission_name],       
    [PermissionState] = perm.[state_desc],       
    [ObjectType] = obj.type_desc,--perm.[class_desc],       
    [ObjectName] = OBJECT_NAME(perm.major_id),
    [ColumnName] = col.[name]
FROM sys.database_principals princ  
LEFT JOIN sys.login_token ulogin on princ.[sid] = ulogin.[sid]
LEFT JOIN sys.database_permissions perm ON perm.[grantee_principal_id] = princ.[principal_id]
LEFT JOIN sys.columns col ON col.[object_id] = perm.major_id  AND col.[column_id] = perm.[minor_id]
LEFT JOIN sys.objects obj ON perm.[major_id] = obj.[object_id]
WHERE 
    princ.[type] in (''S'',''U'')'

EXEC sp_MSforeachdb @command2 
END


BEGIN /*Create database links for use with SOX auditing reports/queries*/
USE [master]
GO
exec master.dbo.sp_MSset_oledb_prop 'ORAOLEDB.Oracle', N'AllowInProcess', 1
EXEC master.dbo.sp_addlinkedserver @server = N'PIMSPROD', @srvproduct=N'Oracle', @provider=N'OraOLEDB.Oracle', @datasrc=N'PIMSPROD.na.praxair.com'
EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'PIMSPROD',@useself=N'False',@locallogin=NULL,@rmtuser=N'pxdba',@rmtpassword='exapxgen'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'collation compatible', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'data access', @optvalue=N'true'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'dist', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'pub', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'rpc', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'rpc out', @optvalue=N'true'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'sub', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'connect timeout', @optvalue=N'0'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'collation name', @optvalue=null
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'lazy schema validation', @optvalue=N'false'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'query timeout', @optvalue=N'0'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'use remote collation', @optvalue=N'true'
EXEC master.dbo.sp_serveroption @server=N'PIMSPROD', @optname=N'remote proc transaction promotion', @optvalue=N'true'
GO
exec master.dbo.sp_serveroption 
 @server=N'PIMSPROD'
,@optname=N'rpc out'
,@optvalue=N'true'
END

BEGIN /* */
--stage role name, role_id, type, role_id, and member principal_id in temp table
select p.name,p.principal_id,p.type_desc,rm.role_principal_id,rm.member_principal_id  into #usapxm20_temp
from sys.database_principals p
join sys.database_role_members rm on rm.role_principal_id=p.principal_id

--join data back to sys.database_principals to get member name from member_principal_id
select u.name,p.name from #usapxm20_temp u
join sys.database_principals p
on p.principal_id=u.member_principal_id
order by u.name

drop table #usapxm20_temp
END

BEGIN /* List users and direct grants */
SELECT permission_name,sc.name,o.name,prin.name
       FROM sys.database_permissions perm
	   join sys.objects o on o.object_id=perm.major_id
	   join sys.database_principals prin on prin.principal_id=perm.grantee_principal_id
	   join sys.schemas sc on o.schema_id=sc.schema_id
  where grantee_principal_id <>0 and prin.name not like '%_ROLE'
  order by permission_name
  END
  
BEGIN /* Create table and triggers to track/audit use of local service accounts, disallow logins for certain users if not from specific machines*/
CREATE TABLE [dba].[dbo].[ValidIPAddress]
(
	[IP] [nvarchar](15) NOT NULL,
	CONSTRAINT [PK_ValidAddress] PRIMARY KEY CLUSTERED 
	(
		[IP] ASC
	)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

create table dba.dbo.Login_info 
(
	EVENT_TYPE NVARCHAR(50),
	POST_TIME NVARCHAR(50),
	SPID NVARCHAR(50),
	SERVER_NAME NVARCHAR(50),
	LOGIN_NAME NVARCHAR(50),
	[LOGIN_TYPE] NVARCHAR(50),
	[SID] NVARCHAR(50),
	IPADDRESS NVARCHAR(50),
	IS_POOLED NVARCHAR(50),
	[DATE] DATETIME,
	[HOST_NAME] NVARCHAR(50),
	[CLIENT_INTERFACE_NAME] NVARCHAR(50),
	[PROGRAM_NAME] NVARCHAR(75),
	[LOGIN_TIME] DATETIME
);




CREATE TRIGGER tr_LogOn_CheckIP ON ALL SERVER WITH EXECUTE AS 'sa'
    FOR LOGON
AS
    BEGIN----1
        DECLARE @IPAddress NVARCHAR(50) ;
		DECLARE @LOGNAME NVARCHAR(50);
		DECLARE @EVENT_TYPE NVARCHAR(50);
		DECLARE @POST_TIME NVARCHAR(50);
		DECLARE @SPID NVARCHAR(50);
		DECLARE @SERVERNAME NVARCHAR(50);
		DECLARE @LOGINTYPE NVARCHAR(50);
		DECLARE @SID NVARCHAR(50);
		DECLARE @ISPOOLED NVARCHAR(50);
		DECLARE @EMAILBODY NVARCHAR(MAX)
				
		set @LOGNAME=EVENTDATA().value('(/EVENT_INSTANCE/LoginName)[1]','NVARCHAR(50)') ;
        SET @IPAddress = EVENTDATA().value('(/EVENT_INSTANCE/ClientHost)[1]','NVARCHAR(50)'); 
		SET @EVENT_TYPE = EVENTDATA().value('(/EVENT_INSTANCE/event_type)[1]','NVARCHAR(50)'); 
		SET @POST_TIME = EVENTDATA().value('(/EVENT_INSTANCE/post_time)[1]','NVARCHAR(50)'); 
		SET @SPID = EVENTDATA().value('(/EVENT_INSTANCE/SPID)[1]','NVARCHAR(50)'); 
		SET @SERVERNAME = EVENTDATA().value('(/EVENT_INSTANCE/server_name)[1]','NVARCHAR(50)'); 
		SET @LOGINTYPE = EVENTDATA().value('(/EVENT_INSTANCE/login_type)[1]','NVARCHAR(50)'); 
		SET @SID = EVENTDATA().value('(/EVENT_INSTANCE/SID)[1]','NVARCHAR(50)'); 
		SET @ISPOOLED = EVENTDATA().value('(/EVENT_INSTANCE/is_pooled)[1]','NVARCHAR(50)'); 
		SET @EMAILBODY = (select N'A logon as user '+@LOGNAME+N' has occurred from outside the application and web servers. Logon details are below: 
						Login Name: '+@LOGNAME+ N' 
						SID: '+@SPID+ N'
						IP Address: '+@IPAddress+ N'
						Alert Time: '+convert(varchar,GETDATE())+ N'
						Host Name: '+a.host_name+ N'
						Interface Name: '+a.client_interface_name+ N'
						Program Name: '+a.program_name+ N'
						Login Time: '+convert(varchar,a.login_time) 
							from sys.dm_exec_sessions a where session_id=@SPID)

							
		
		IF @LOGNAME in ('PDDSUser') and NOT EXISTS ( SELECT IP FROM dba.dbo.ValidIPAddress WHERE IP = @IPAddress )--Stand in for PDDSUSER CHECK For Username you are restricting
		BEGIN ----2
						EXEC msdb.dbo.sp_send_dbmail
							@recipients = 'Patrick_mcjury@praxair.com;', 
							@profile_name = 'smtpgate.na.praxair.com Administrator',
							@subject = 'PDDSUser Logon Alert', 
							@body = @EMAILBODY;
						INSERT INTO dba.dbo.Login_info SELECT @Event_TYPE, @POST_TIME, @SPID, @SERVERNAME, @LOGNAME, @LOGINTYPE, @SID, @IPAddress, @ISPOOLED, GETDATE(), a.host_name, a.client_interface_name, a.program_name, a.login_time 
							from sys.dm_exec_sessions a where session_id=@SPID
        END----2
		 IF @LOGNAME IN ('PDDSUSER_SCOTT','PDDSUSER_JON')--Stand in for PDDSUSER_SCOTT
		BEGIN----3
			INSERT INTO dba.dbo.Login_info SELECT @Event_TYPE, @POST_TIME, @SPID, @SERVERNAME, @LOGNAME, @LOGINTYPE, @SID, @IPAddress, @ISPOOLED, GETDATE(), a.host_name, a.client_interface_name, a.program_name, a.login_time 
				from sys.dm_exec_sessions a where session_id=@SPID
		END----3
	END----1


END
